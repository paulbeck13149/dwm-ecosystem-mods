--- a/dwm.c
+++ b/dwm.c
@@ -115,6 +115,7 @@ struct Monitor {
 	float mfact;
 	int nmaster;
 	int num;
+	int gappx;            /* gaps between windows */
 	int by;               /* bar geometry */
 	int mx, my, mw, mh;   /* screen size */
 	int wx, wy, ww, wh;   /* window area  */
@@ -123,6 +124,7 @@ struct Monitor {
 	unsigned int tagset[2];
 	int showbar;
 	int topbar;
+	unsigned int pertag;
 	Client *clients;
 	Client *sel;
 	Client *stack;
@@ -211,6 +213,29 @@ static int xerror(Display *dpy, XErrorEvent *ee);
 static int xerrordummy(Display *dpy, XErrorEvent *ee);
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 
+typedef struct {
+	const Layout *lt;
+	float mfact;
+	int nmaster;
+	int showbar;
+	int topbar;
+	int gappx;
+} Pertag;
+
+static Pertag *pertagget(Monitor *m, unsigned int tag);
+
+#include "fibonacci.c"
+
+static Pertag *
+pertagget(Monitor *m, unsigned int tag)
+{
+	Pertag *p = m->pertag;
+	if (!p) {
+		p = m->pertag = ecalloc(LENGTH(tags), sizeof(Pertag));
+	}
+	return &p[tag];
+}
+
 /* variables */
 static const char broken[] = "broken";
 static char stext[256];
@@ -638,8 +663,21 @@ createmon(void)
 	m->nmaster = nmaster;
 	m->showbar = showbar;
 	m->topbar = topbar;
+	m->gappx = gappx;
+	m->pertag = ecalloc(LENGTH(tags), sizeof(Pertag));
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
+	
+	for (unsigned int i = 0; i < LENGTH(tags); i++) {
+		Pertag *p = pertagget(m, i);
+		p->mfact = mfact;
+		p->nmaster = nmaster;
+		p->showbar = showbar;
+		p->topbar = topbar;
+		p->lt = &layouts[0];
+		p->gappx = gappx;
+	}
+	
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
 	return m;
 }
@@ -1508,8 +1546,10 @@ setlayout(const Arg *arg)
 {
 	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
 		selmon->sellt ^= 1;
-	if (arg && arg->v)
-		selmon->lt[selmon->sellt] = (Layout *)arg->v;
+	if (arg && arg->v) {
+		Pertag *p = pertagget(selmon, selmon->pertag);
+		p->lt = selmon->lt[selmon->sellt] = (Layout *)arg->v;
+	}
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
 	if (selmon->sel)
 		arrange(selmon);
@@ -1521,12 +1561,14 @@ void
 setmfact(const Arg *arg)
 {
 	float f;
+	Pertag *p = pertagget(selmon, selmon->pertag);
 
 	if (!arg || !selmon->lt[selmon->sellt]->arrange)
 		return;
-	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
+	f = arg->f < 1.0 ? arg->f + p->mfact : arg->f - 1.0;
 	if (f < 0.05 || f > 0.95)
 		return;
+	p->mfact = f;
 	selmon->mfact = f;
 	arrange(selmon);
 }
@@ -1683,8 +1725,9 @@ tagmon(const Arg *arg)
 void
 tile(Monitor *m)
 {
-	unsigned int i, n, h, mw, my, ty;
 	Client *c;
+	unsigned int i, n, h, mw, my, ty;
+	Pertag *p = pertagget(m, m->pertag);
 
 	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
 	if (n == 0)
@@ -1693,18 +1736,18 @@ tile(Monitor *m)
 	if (n > m->nmaster)
 		mw = m->nmaster ? m->ww * m->mfact : 0;
 	else
-		mw = m->ww;
-	for (i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+		mw = m->ww - p->gappx;
+	for (i = 0, my = ty = p->gappx, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
 		if (i < m->nmaster) {
-			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
-			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
-			if (my + HEIGHT(c) < m->wh)
-				my += HEIGHT(c);
+			h = (m->wh - my) / (MIN(n, m->nmaster) - i) - p->gappx;
+			resize(c, m->wx + p->gappx, m->wy + my, mw - (2*c->bw) - p->gappx, h - (2*c->bw), 0);
+			if (my + HEIGHT(c) + p->gappx < m->wh)
+				my += HEIGHT(c) + p->gappx;
 		} else {
-			h = (m->wh - ty) / (n - i);
-			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), 0);
-			if (ty + HEIGHT(c) < m->wh)
-				ty += HEIGHT(c);
+			h = (m->wh - ty) / (n - i) - p->gappx;
+			resize(c, m->wx + mw + p->gappx, m->wy + ty, m->ww - mw - (2*c->bw) - 2*p->gappx, h - (2*c->bw), 0);
+			if (ty + HEIGHT(c) + p->gappx < m->wh)
+				ty += HEIGHT(c) + p->gappx;
 		}
 }
