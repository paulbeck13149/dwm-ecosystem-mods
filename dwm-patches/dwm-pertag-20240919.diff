--- a/dwm.c
+++ b/dwm.c
@@ -68,6 +68,8 @@ enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
        ClkClientWin, ClkRootWin, ClkLast }; /* clicks */
 
+static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+
 typedef union {
 	int i;
 	unsigned int ui;
@@ -111,6 +113,7 @@ typedef struct {
 	void (*arrange)(Monitor *);
 } Layout;
 
+typedef struct Pertag Pertag;
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
@@ -127,9 +130,24 @@ struct Monitor {
 	Client *stack;
 	Monitor *next;
 	Window barwin;
+	Pertag *pertag;
 	const Layout *lt[2];
 };
 
+struct Pertag {
+	unsigned int curtag, prevtag; /* current and previous tag */
+	int nmasters[LENGTH(tags) + 1]; /* number of windows in master area */
+	float mfacts[LENGTH(tags) + 1]; /* mfacts per tag */
+	unsigned int sellts[LENGTH(tags) + 1]; /* selected layouts */
+	const Layout *ltidxs[LENGTH(tags) + 1][2]; /* matrix of tags and layouts indexes  */
+	int showbars[LENGTH(tags) + 1]; /* display bar for the current tag */
+};
+
+/* Pertag Function Prototypes */
+static void pertagview(const Arg *arg);
+static void pertagtogglerview(const Arg *arg);
+static int pertaginc(int i);
+
 typedef struct {
 	const char *class;
 	const char *instance;
@@ -638,11 +656,34 @@ createmon(void)
 Monitor *
 createmon(void)
 {
-	Monitor *m;
+	Monitor *m;
+	unsigned int i;
 
 	m = ecalloc(1, sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
 	m->mfact = mfact;
+	m->nmaster = nmaster;
+	m->showbar = showbar;
+	m->topbar = topbar;
+	m->lt[0] = &layouts[0];
+	m->lt[1] = &layouts[1 % LENGTH(layouts)];
+	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
+
+	m->pertag = ecalloc(1, sizeof(Pertag));
+	m->pertag->curtag = m->pertag->prevtag = 1;
+
+	for (i = 0; i <= LENGTH(tags); i++) {
+		m->pertag->nmasters[i] = m->nmaster;
+		m->pertag->mfacts[i] = m->mfact;
+
+		m->pertag->ltidxs[i][0] = m->lt[0];
+		m->pertag->ltidxs[i][1] = m->lt[1];
+		m->pertag->sellts[i] = m->sellt;
+
+		m->pertag->showbars[i] = m->showbar;
+	}
+
+	return m;
 }
 
 void
@@ -1510,11 +1551,15 @@ void
 setlayout(const Arg *arg)
 {
 	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
-		selmon->sellt ^= 1;
-	if (arg && arg->v)
-		selmon->lt[selmon->sellt] = (Layout *)arg->v;
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag] ^= 1;
+	if (arg && arg->v)
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt] = (Layout *)arg->v;
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
-	if (selmon->sel)
+	if (selmon->sel) {
+		arrange(selmon);
+	} else {
+		drawbar(selmon);
+	}
 		arrange(selmon);
 	else
 		drawbar(selmon);
@@ -1529,8 +1574,8 @@ setmfact(const Arg *arg)
 
 	if (!arg || !selmon->lt[selmon->sellt]->arrange)
 		return;
-	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
-	if (f < 0.05 || f > 0.95)
+	f = arg->f < 1.0 ? arg->f + selmon->pertag->mfacts[selmon->pertag->curtag] : arg->f - 1.0;
+	if (f < 0.05 || f > 0.95)
 		return;
 	selmon->mfact = f;
 	arrange(selmon);
@@ -1700,7 +1745,7 @@ tile(Monitor *m)
 		return;
 
 	if (n > m->nmaster)
-		mw = m->nmaster ? m->ww * m->mfact : 0;
+		mw = m->nmaster ? m->ww * m->pertag->mfacts[m->pertag->curtag] : 0;
 	else
 		mw = m->ww;
 	for (i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
@@ -1892,11 +1937,97 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
-	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
+	unsigned int i;
+	Client *c;
+
+	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags] && selmon->pertag->curtag == arg->ui)
 		return;
+
 	selmon->seltags ^= 1; /* toggle sel tagset */
+	selmon->pertag->prevtag = selmon->pertag->curtag;
+	selmon->pertag->curtag = arg->ui & TAGMASK;
+
 	if (arg->ui & TAGMASK)
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+
+	selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+	selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+	selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+	selmon->lt[0] = selmon->pertag->ltidxs[selmon->pertag->curtag][0];
+	selmon->lt[1] = selmon->pertag->ltidxs[selmon->pertag->curtag][1];
+
+	if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+		togglebar(NULL);
+
+	focus(NULL);
+	arrange(selmon);
+}
+
+void
+pertagview(const Arg *arg)
+{
+	int i;
+	unsigned int tmptag;
+	Monitor *m = selmon;
+
+	if (arg->ui & TAGMASK) {
+		m->pertag->prevtag = m->pertag->curtag;
+		m->pertag->curtag = arg->ui & TAGMASK;
+
+		if (m->pertag->curtag == 0) {
+			m->pertag->curtag = m->pertag->prevtag;
+		}
+
+		m->nmaster = m->pertag->nmasters[m->pertag->curtag];
+		m->mfact = m->pertag->mfacts[m->pertag->curtag];
+		m->sellt = m->pertag->sellts[m->pertag->curtag];
+		m->lt[0] = m->pertag->ltidxs[m->pertag->curtag][0];
+		m->lt[1] = m->pertag->ltidxs[m->pertag->curtag][1];
+
+		if (m->showbar != m->pertag->showbars[m->pertag->curtag])
+			togglebar(NULL);
+
+		view(arg);
+	}
+}
+
+void
+pertagtogglerview(const Arg *arg)
+{
+	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
+	int i;
+
+	if (newtagset) {
+		selmon->tagset[selmon->seltags] = newtagset;
+		if (newtagset == ~0) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			selmon->pertag->curtag = 0;
+		}
+		/* test if the user did not select the same tag */
+		if (!(newtagset & 1 << (selmon->pertag->curtag - 1))) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			for (i = 0; !(newtagset & 1 << i); i++) ;
+			selmon->pertag->curtag = i + 1;
+		}
+		selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+		selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+		selmon->lt[0] = selmon->pertag->ltidxs[selmon->pertag->curtag][0];
+		selmon->lt[1] = selmon->pertag->ltidxs[selmon->pertag->curtag][1];
+		if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+			togglebar(NULL);
+	}
+	focus(NULL);
+	arrange(selmon);
+}
+
+int
+pertaginc(int i)
+{
+	int next;
+	next = selmon->pertag->curtag + i;
+	if (next <= 0)
+		next = LENGTH(tags);
+	else if (next > LENGTH(tags))
+		next = 1;
+	return next;
 }
 
 Client *
